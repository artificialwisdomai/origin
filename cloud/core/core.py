from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class LanguageModel(BaseModel):
    "A language model."
    name: str

class ModelConfiguration(BaseModel):
    "A prepared configuration."

class DataStore(BaseModel):
    "A source of data which can be used for training and inference."

class InferredText(BaseModel):
    "A text object generated by a language model."

@app.get("/v0/models")
async def listModels() -> list[LanguageModel]:
    "Enumerate the available language models."
    return []

@app.get("/v0/config")
async def newConfig() -> ModelConfiguration:
    "Build a configuration."
    return ModelConfiguration()

@app.post("/v0/infer")
async def infer(model :LanguageModel, config :ModelConfiguration,
                data :DataStore) -> InferredText:
    "Perform inference with a configured model over a data source."
    return InferredText()
